#!/bin/bash

#-----------#
## Drives to install to
## Update to /dev/disk/by-id
## Usig Default console keymap "US"
## ls /usr/share/kbd/keymaps/**/*.map.gz
## example: loadkeys de-latin1 :: loads keymap de-latin1
## console fonts found in /usr/share/kbd/consolefonts/
## setfont <font>
## verify boot mode
#  ls /sys/firmware/efi/efivars
## Run dhcpcd to connect to network
## assumed ethernet connection

## Network Section ##
## use seperate script network configuration ##
# check driver for card enabled
# lspci -k
# lsusb -v
# PCI(e) and USB respectively
## check ip interfaces
# ip link show
# ip link set <interface> up
## check firmware loaded
# dmesg | grep firmware
# dhcpcd
## Main Drive
DRIVE1=' '

## Seconday Drive // USB Drive
DRIVE2=' '
echo "available drives"
ls -l /dev/disk/by-id/##  partition_usb $DRIVE2
partition_usb $DRIVE2
        partition_usb() {
                local dev="$1"; shift
                sgdisk --zap-all "$dev"
                sgdisk -p "$dev"
                sgdisk -g "$dev"
                sgdisk -n 1:2048:1050623 -t 1:ef00 -g -p "$dev"
                sgdisk -n 2:1050624:1460223 -g -t 2:8300 -p "$dev"
                sgdisk -c 1:"EFI" -c 2:"LINUX
                mkfs.fat -F32 '$dev*-part1'
                cryptsetup luksFormat '$dev'*-part2
                cryptsetup open '$dev'*-part2 encboot
        }
set_usb001 $DRIVE2-part2

        set_usb001() {
                local dev="$1"; shift
                mkfs.fat -F32 #dev-part1
                cryptsetup -v --cipher aes-xts-plain64 --key-size 512 --hash sha512 --i
ter-time 5000 --use-random --verify-passphrase luksFormat $dev-part2
                cryptsetup open $dev-part2 encboot
        }


## set_usb002 $DRIVE2
set_usb002 $DRIVE2-part2

        set_usb002() {
                local dev="$1"; shift
                local bs=' ';
                echo 'enter block-size'
                read bs
                mount /dev/mapper/encboot /mnt
                dd if=/dev/urandom of=/mnt/key.img bs="$bs" count=1
                cryptsetup --align-payload=1 luksFormat /mnt/key.img
                cryptsetup open /mnt/key.img lukskey

        }

## set_main $DRIVE1
set_main $DRIVE1

        set_main() {
                local dev="$1"; shift
                echo 'enter key-file offset'
                local offset=' '
                read offset
                echo 'enter key-file size'
                read size
                truncate -s 16M /mnt/header.img


                cryptsetup --key-file=/dev/mapper/lukskey --keyfile-offset="$offset" keyfile-size="$size" $1 enc
                cryptsetup open --header /mnt/header.img --key-file=/dev/mapper/lukskey --keyfile-offset=$offset --keyfile-size=$size $DRIVE enc
                cryptsetup close lukskey
                umount /mnt
                pvcreate /dev/mapper/encryptmain
                vgcreate MVG /dev/mapper/encryptmain
                lvcreate -L 8G MVG -n swap
                lvcreate -L 32G MVG -n root
                lvcreate -l 100%FREE MVG -n home
                mkfs.ext4 /dev/MVG/root
                mkfs.ext4 /dev/MVG/home
                mkswap /dev/MVG/swap
                mount /dev/MVG/root /mnt
                mkdir /mnt/home
                mount /dev/MVG/home /mnt/home
                swapon /dev/MVG/swap
        }
